---
- name: Ensure the working directories for each systemd service unit exist.
  block:
    - name: Check whether the directories exists.
      ansible.builtin.stat:
        path: "{{ instance.working_directory }}"
      loop: "{{ rustus_instances }}"
      loop_control:
        loop_var: instance
      register: __stat_working_directory

    - name: Create the working directories if they do not exist.
      ansible.builtin.file:
        path: "{{ item.instance.working_directory }}"
        state: directory
        owner: "{{ item.instance.user if not item.stat.exists else omit }}"
        group: "{{ item.instance.group if not item.stat.exists else omit }}"
        mode: "{{ '0770' if not item.stat.exists else omit }}"
      loop: "{{ __stat_working_directory.results }}"

# Using the systemd instance functionality doesn't work here because the user/group cannot be an env var, but should not
# necessarily be the same for all instances, so we resort to creating individual service units for each instance.
- name: Install rustus service units
  ansible.builtin.template:
    src: rustus.service.j2
    dest: /etc/systemd/system/rustus-{{ item.name }}.service
    mode: "0644"
  loop: "{{ rustus_instances }}"
  register: __rustus_modified_instances
  notify:
    - Reload systemd
    - Restart modified rustus instances

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure configured rustus instances are enabled and running
  ansible.builtin.service:
    name: rustus-{{ item.name }}.service
    state: started
    enabled: true
  loop: "{{ rustus_instances }}"
