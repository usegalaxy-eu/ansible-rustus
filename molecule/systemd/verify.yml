---
# This is a playbook to execute Ansible tests.

- name: Verify
  hosts: all
  gather_facts: false
  vars_files:
    - ../../defaults/main.yml
    - vars.yml
  tasks:
    - name: Verify that rustus operates as expected.
      block:
        - name: Rustus should be listening on port 10081.
          ansible.builtin.wait_for:
            port: 10081
            timeout: 10

        - name: Upload a file using the TUS protocol.
          block:
            - name: Create the upload.
              ansible.builtin.uri:
                url: http://127.0.0.1:10081/uploads
                method: POST
                headers:
                  Tus-Resumable: "1.0.0"
                  Host: "127.0.0.1:10081"
                  Content-Length: "0"
                  Upload-Length: "7"
                  Upload-Metadata: "filename d29ybGRfZG9taW5hdGlvbl9wbGFuLnBkZg==,is_confidential"
                status_code: 201
              register: __create
              changed_when: true

            - name: Upload the file.
              # noqa: command-instead-of-module
              # curl is used instead of ansible.builtin.uri because the module's body is behaving
              # differently from --data-binary. In fact, if the option -d is used with curl
              # instead of --data-binary, curl hangs just as ansible's uri module.
              ansible.builtin.shell: |
                curl -v -X PATCH \
                  -H "Tus-Resumable: 1.0.0" \
                  -H "Host: 127.0.0.1:10081" \
                  -H "Content-Length: 7" \
                  -H "Content-Type: application/offset+octet-stream" \
                  -H "Upload-Offset: 0" \
                  {{ __create.location }} \
                  --data-binary 'Hello\n'
              changed_when: true

        - name: Verify that the file was uploaded succesfully.
          block:
            - name: Check that the file exists
              ansible.builtin.stat:
                path: "{{ uploads_dir }}/{{ __create.location | basename }}"
              register: __stat_upload

            - name: Read the contents of the uploaded file.
              ansible.builtin.command: cat "{{ uploads_dir }}/{{ __create.location | basename }}"
              register: __contents_upload
              changed_when: false

            - name: Check that the contents match the expected ones.
              ansible.builtin.assert:
                that: __contents_upload.stdout == "Hello\\n"
      always:
        - name: Count number of files in the uploads folder.
          ansible.builtin.shell: |
            set -o pipefail
            ls -lah {{ uploads_dir }} | wc -l
          register: __count
          changed_when: false

        - name: Clear uploads folder.
          ansible.builtin.shell: |
            set -o pipefail
            rm -rf {{ uploads_dir }}/* {{ uploads_dir }}/.*
            ls -lah {{ uploads_dir }} | wc -l
          register: __count_clean
          changed_when: __count.stdout != __count_clean.stdout

    - name: Verify that the permissions of the already existing working directory remained unchanged.
      block:
        - name: Gather information about the working directory.
          ansible.builtin.stat:
            path: "{{ existing_dir }}"
          register: __stat_existing_dir

        - name: Retrieve user details.
          ansible.builtin.getent:
            database: passwd

        - name: Verify that the owner remained unchanged.
          ansible.builtin.assert:
            that: __stat_existing_dir.stat.uid == {{ getent_passwd[rustus_owner].1 }}

        - name: Verify that the group remained unchanged.
          ansible.builtin.assert:
            that: __stat_existing_dir.stat.gid == {{ getent_passwd['root'].2 }}

        - name: Verify that the mode remained unchanged.
          ansible.builtin.assert:
            that: __stat_existing_dir.stat.mode == existing_dir_mode
